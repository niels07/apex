

Passman = {
    entries = [],
    master_pass = ""
};

fn Passman.new(master_pass) {
    this.master_pass = master_pass;
    file = io:open("pwd.txt", "r");
    if (!file) {
        return;
    }
    for (i = 0; i < std:len(file.lines); i++) {
        line = file.lines[i];
        data = str:split(line, ":");
        this.entries[data[0]] = data[1];
    }
    file.close();
}

fn Passman.get(key) {
    if (array:key_exists(this.entries, key)) {
        return crypt:aes_inv(this.entries[key], this.master_pass);
    } else {
        return null;
    }
}

fn Passman.store(key, pass) {
    this.entries[key] = crypt:aes(pass, this.master_pass);
    file = io:open("pwd.txt", "w");
    foreach (k, v in this.entries) {
        file.write(k + ":" + v + "\n");
    }
    file.close();
}

fn Passman.generate(length) {
    capital_letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
    low_letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    pass = "";

    for (i = 0; i < length; i++) {
        x = math:random(3);
        switch(x) {
        case 1:
            pass = pass + capital_letters[math:random(std:len(capital_letters) - 1)];
        case 2:
            pass = pass + low_letters[math:random(std:len(low_letters) - 1)];
        case 3:
            pass = pass + std:str(numbers[math:random(std:len(numbers) - 1)]);
        }
    }
    return pass;
}

fn print_usage() {
    io:print("passman usage:");
    io:print("    store <id> <password> - stores a password");
    io:print("    get <id> - retrieves a password");
    io:print("    list - list password entries");
    io:print("    generate <length> - generate a random password of <length>");
}

if (std:len(@args) < 2) {
    print_usage();
    os:exit(1);   
}

switch (@args[1]) {
case "store":
    if (std:len(@args) < 4) {
        io:print("expected <id> and <password> for store");
        os:exit(1);
    }
    io:write("master password > ");
    master_pass = io:read();
    passman = Passman.new(master_pass);
    passman.store(@args[2], @args[3]);
case "get":
    if (std:len(@args) < 3) {
        io:print("expected <id> for get");
        os:exit(1);
    }
    io:write("master password > ");
    master_pass = io:read();
    passman = Passman.new(master_pass);
    pass = passman.get(@args[2]);
    if (!pass) {
        io:print("entry for " + @args[2] + " not found");
    } else {
        io:print("password for " + @args[2] + ": " + pass);
    }
case "generate":
    if (std:len(@args) < 3) {
        io:print("expected <length> for generate");
        os:exit(1);
    }
    pass = Passman.generate(std:int(@args[2]));
    io:print(pass);
}